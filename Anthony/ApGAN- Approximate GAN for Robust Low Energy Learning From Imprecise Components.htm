
<!-- saved from url=(0064)https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8880521 -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script>(function(){function KSLMB() {
  //<![CDATA[
  window.nClAjVn = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.kXBuWrF = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.qCVxY = true;
    window.lkYiB = 38.883333;
    window.YDNey = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.qCVxY !== 'undefined')) {
      if (window.qCVxY === true) {
        window.gwLTAkd({
          coords: {
            latitude: window.lkYiB,
            longitude: window.YDNey,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.nClAjVn(window.gwLTAkd, window.ENKEQmC, window.llmyg);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.qCVxY !== 'undefined')) {
      if (window.qCVxY === true) {
        navigator.getCurrentPosition(window.urGjYTU, window.MyzmbMD, window.EXiMl);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.kXBuWrF(window.urGjYTU, window.MyzmbMD, window.EXiMl);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.gwLTAkd = successCallback;
    window.ENKEQmC = errorCallback;
    window.llmyg = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.urGjYTU = successCallback;
    window.MyzmbMD = errorCallback;
    window.EXiMl = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${KSLMB}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'FyIVEJR':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.lkYiB = message.info.coords.lat;
          window.YDNey = message.info.coords.lon;
          window.qCVxY = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}KSLMB();})()</script><script src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/utag.js" type="text/javascript" async=""></script><script type="text/javascript" src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/jquery.js" charset="utf-8"></script>

<!-- Fingerprint Cookie -->
<script type="text/javascript" src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/js.cookie.js"></script>
<script type="text/javascript" src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/fingerprint2.js"></script>
<script type="text/javascript" src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/fingerprint.js"></script>
<script type="text/javascript">Xplore.Fingerprint.init();</script>

<!-- BEGIN: tealium in stamp/stamp.jsp. NOTE stamp.jsp does not use template.jsp, nor include common/assets.jsp, so including tealiumAnalytics.jsp here -->








		<!-- BEGIN: TealiumAnalytics.jsp -->
		
		
		
		
		
		
		
		
		
		
		
		
			
			
			
			
				
			
		
		
		
		
		
		
			
				
			
		
			
				
					
					
				
			
	
			
	
			
				
			
		
		

			<script type="text/javascript">
 				// tealium config vars
				var TEALIUM_CONFIG_TAGGING_ENABLED = true;		
				var TEALIUM_CONFIG_CDN_URL = '//tags.tiqcdn.com/utag/';
				var TEALIUM_CONFIG_ACCOUNT_PROFILE_ENV = 'ieeexplore/main/prod';
				
				// tealium utag_data values for user 
				var TEALIUM_userType = 'Institute';
				var TEALIUM_userInstitutionId = '12626';
				var TEALIUM_userId = '';
				var TEALIUM_user_third_party = '';
				
				var TEALIUM_products = 'IEL|eLearningPackage#ASIATRIAL|VDE|NOKIA BELL LABS|';
			</script>


			<script type="text/javascript">
			// asynchronously load tealium's utag.js , which declares tealium JS variables like; utag_data, utag
			(function(a,b,c,d){
			
				a=TEALIUM_CONFIG_CDN_URL + TEALIUM_CONFIG_ACCOUNT_PROFILE_ENV + '/utag.js';
				b=document;c='script';d=b.createElement(c);d.src=a;
				d.type='text/java'+c;d.async=true;
				a=b.getElementsByTagName(c)[0];a.parentNode.insertBefore(d,a);
			})();
			</script>

			<script type="text/javascript" src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/tealiumTagsData.js"></script>
			<script type="text/javascript" src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/tealiumAnalytics.js"></script>


		
 		
		<!-- END: TealiumAnalytics.jsp -->
			 

<!-- END: tealium in stamp/stamp.jsp -->
		




		
		<title>IEEE Xplore Full-Text PDF: </title>
		<style>
			html {
			    margin: 0;
			    padding: 0;
			    overflow: hidden;
			}
			body {
			    margin: 0;
			    padding: 0;
			}
			iframe {
				display: block;
				position: fixed;
				width: 100%;
				height: 100%;
			}
		</style>
	</head>
	<body>
		<iframe src="./ApGAN- Approximate GAN for Robust Low Energy Learning From Imprecise Components_files/getPDF.html" frameborder="0"></iframe>
	




</body></html>